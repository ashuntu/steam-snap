#!/usr/bin/python3

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
import os

TITLE = "NVIDIA 32-bit Not Found"
TEXT = """<b>32-bit NVIDIA driver files were not found on your host system.</b>
It is recommended that you install them for the best experience.

See <a href="https://github.com/canonical/steam-snap/wiki/FAQ#32-bit-driver">https://github.com/canonical/steam-snap/wiki/FAQ#32-bit-driver</a> for more information.

To install, run:"""
COMMAND = """sudo dpkg --add-architecture i386
sudo apt update
sudo apt install libnvidia-gl-{}:i386"""

def nvidia_version():
    """Try to find NVIDIA driver version from modinfo.
    """
    nvidia_version = os.popen(
        "modinfo /usr/lib/modules/$(uname -r)/kernel/nvidia*/nvidia.ko 2> /dev/null"
        " | grep -m 1 '^version:'"
        " | sed 's/version:\s*//'"
        ).read().splitlines()[0].strip()
    if not nvidia_version:
        nvidia_version = os.popen(
            "modinfo /usr/lib/modules/$(uname -r)/updates/dkms/nvidia.ko 2> /dev/null"
            " | grep -m 1 '^version:'"
            " | sed 's/version:\s*//'"
        ).read().splitlines()[0].strip()
    if not nvidia_version:
        return ()
    nvidia_version_major = nvidia_version.split(".")[0]
    return (nvidia_version, nvidia_version_major)


def nvidia_missing():
    """Returns whether NVIDIA 32 is missing or not.
    """
    version = nvidia_version()
    if not version:
        return False

    print(f"Found NVIDIA version: {version[0]}")
    return os.path.exists(f"/var/lib/snapd/hostfs/usr/lib/x86_64-linux-gnu/libnvidia-glcore.so.{version[0]}")\
        and not os.path.exists(f"/var/lib/snapd/hostfs/usr/lib/i386-linux-gnu/libnvidia-glcore.so.{version[0]}")


class NvidiaWindow(Gtk.Window):
    def __init__(self):
        super().__init__()
        self.set_resizable(False)
        self.set_border_width(10)
        self.set_position(Gtk.WindowPosition.CENTER)

        header = Gtk.HeaderBar(title=TITLE)
        self.set_titlebar(header)

        self.vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.vbox.set_spacing(10)
        self.add(self.vbox)

        self.label = Gtk.Label()
        self.label.set_markup(TEXT)
        self.vbox.pack_start(self.label, True, True, 0)

        textview = Gtk.TextView()
        textview.set_editable(False)
        textview.set_monospace(True)
        textbuffer = textview.get_buffer()
        textbuffer.set_text(COMMAND.format(nvidia_version()[1]))
        self.vbox.pack_start(textview, True, True, 0)

        self.btn = Gtk.Button(label="Ok")
        self.btn.connect("clicked", lambda x: self.close())
        self.vbox.pack_start(self.btn, True, True, 0)


if nvidia_missing():
    win = NvidiaWindow()
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()
